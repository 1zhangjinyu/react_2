{"version":3,"sources":["components/Input.js","components/List.js","pages/Context.js","pages/TodoList.js","components/Control.js","pages/Demo02.js","pages/Demo01.js","pages/HOC.js","02/Header.js","02/Home.js","02/Tuto.js","02/Comm.js","02/RouteWithSubRoutes.js","02/router.config.js","02/Doc.js","02/Core.js","02/Guide.js","02/Api.js","02/Hooks.js","02/Blog.js","02/Login.js","02/App.js","index.js"],"names":["Input","this","input","focus","htmlFor","id","ref","info","value","props","inpValue","type","onChange","handleChange","onClick","addTodo","Component","List","arr1","todos","filter","item","done","arr2","length","renderTodos","Context","React","createContext","Demo02","Consumer","data","map","key","changeData","Demo01","style","width","height","backgroundColor","defaultProps","name","withFetch","Com","url","Topic","state","fetch","then","res","json","setState","disPlayName","dangerouslySetInnerHTML","__html","content","console","log","title","Header","activeClassName","to","Home","textAlign","history","push","Tuto","Comm","RouteWithSubRoutes","route","pri","PrivateRoute","path","render","component","routes","exact","withRouter","className","i","from","localStorage","setItem","replace","location","rest","getItem","pathname","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.91e66113.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Input extends Component {\r\n    componentDidMount(){       // 页面挂载完时调用\r\n        this.input.focus();    // 页面加载成功后获得焦点\r\n    }\r\n   \r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"inp\">todoList</label>\r\n                <input \r\n                id=\"inp\" \r\n                ref={info=>this.input = info}\r\n                value={this.props.inpValue} \r\n                type=\"text\" \r\n                onChange={this.props.handleChange}\r\n                />\r\n                <button onClick={this.props.addTodo}>添加</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react'\r\n\r\nclass List extends Component {\r\n    \r\n    render() {\r\n        let arr1 = this.props.todos.filter((item)=>!item.done)\r\n        let arr2 = this.props.todos.filter((item)=>item.done)\r\n\r\n        return (\r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(false)}\r\n                </ul>\r\n                <h2>已经完成{arr2.length}</h2>\r\n                <ul>\r\n                    {this.props.renderTodos(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context;","import React, { Component } from 'react';\r\nimport Input from '../components/Input';\r\nimport List from '../components/List';\r\n\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[]\r\n        }\r\n    }\r\n    componentDidMount(){       // 页面挂载完时调用\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue==''){          // 内容为空时，不添加\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos:[\r\n                {\r\n                    title:this.state.inpValue,\r\n                    done:false\r\n                },\r\n                ...this.state.todos       // 扩展\r\n            ]\r\n        })\r\n        this.setState({inpValue:''});       // 保证每次添加完后，文本框内容为空\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem('todos',JSON.stringify(this.state.todos));\r\n    }\r\n    removeTodo = (idx)=>{\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index!=idx)\r\n        })\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))    // 深拷贝\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{        \r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input onClick={()=>this.toggle(idx)} checked={todo.done} type=\"checkbox\"/>\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>              \r\n                    <button onClick={()=>this.removeTodo(idx)}>删除</button>\r\n                </li>\r\n            }\r\n            \r\n        })\r\n    }\r\n   \r\n     render() {       \r\n        const {todos,inpValue} = this.state;\r\n        return (\r\n            <div>\r\n                <Input inpValue={inpValue} addTodo={this.addTodo} handleChange={this.handleChange}/>\r\n                <List todos={todos} renderTodos={this.renderTodos}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList; \r\n\r\n","import React, { Component } from 'react';\r\nimport './control.css';\r\n\r\n\r\n// 组件名首字母一定要大写\r\nclass Control extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos:[         // 默认值，可以不写\r\n                {title:'1',done:true},\r\n                {title:'2',done:false},\r\n                {title:'3',done:false},\r\n                {title:'4',done:true}\r\n\r\n            ]\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n    addTodo = ()=>{\r\n        // 第一种方法\r\n        // this.state.todos.push({title:this.state.inpValue})\r\n        // this.setState({\r\n        //     todos:this.state.todos\r\n        // })\r\n\r\n        // 第二种方法\r\n        if(this.state.inpValue==''){          // 内容为空时，不添加\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos:[\r\n                {\r\n                    title:this.state.inpValue,\r\n                    done:false\r\n                },\r\n                ...this.state.todos       // 扩展\r\n            ]\r\n        })\r\n        this.setState({inpValue:''});       // 保证每次添加后，文本框内容为空\r\n    }\r\n    removeTodo = (idx)=>{\r\n        // 第一种方法\r\n        // this.state.todos.splice(idx,1);      // 从下标为idx项开始删，删除1个\r\n        // this.setState({todos:this.state.todos});\r\n\r\n        // 第二种方法（深拷贝）\r\n        // let newTodos = JSON.parse(JSON.stringify(this.state.todos))    // 深拷贝\r\n        // newTodos.splice(idx,1);\r\n        // this.setState({todos:newTodos});\r\n\r\n        // 第三种方法\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index!=idx)\r\n        })\r\n    }\r\n    toggle = (index)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos))    // 深拷贝\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    renderTodos = (done)=>{\r\n        return this.state.todos.map((todo,idx)=>{        // 此处的小括号只是一个包裹作用\r\n            if(done==todo.done){\r\n                return <li>\r\n                    <input onClick={()=>this.toggle(idx)} checked={todo.done} type=\"checkbox\"/>\r\n                    {/* <span>{todo.title}</span> */}         {/**输的是什么，出来的是什么 */}\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>      {/*对于输入的是带标签的内容(<h>123</h>)，直接是里面内容(123)，不带标签*/}           \r\n                    <button onClick={()=>this.removeTodo(idx)}>删除</button>\r\n                </li>\r\n            }\r\n            \r\n        })\r\n    }\r\n    componentDidMount(){       // 页面挂载完时调用\r\n        this.input.focus();    // 页面加载成功后获得焦点\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem('todos',JSON.stringify(this.state.todos));\r\n\r\n    }\r\n     render() {          // 只要执行一次setState，就会重新执行一次render\r\n        const {todos,inpValue} = this.state;\r\n        let arr1 = todos.filter((item,index)=>!item.done)\r\n        // let arr2 = todos.filter((item,index)=>item.done)\r\n        return (\r\n            <div className=\"box\">\r\n                <label htmlFor=\"inp\">todoList</label>\r\n                <input \r\n                id=\"inp\" \r\n                ref={info=>this.input = info}\r\n                value={inpValue} \r\n                type=\"text\" \r\n                onChange={this.handleChange}\r\n                />\r\n                <button onClick={this.addTodo}>添加</button>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul style={{color:3>2?'red':'green',fontSize:'20px'}}>\r\n                    {this.renderTodos(false)}     {/**差值表达式，放在大括号里 */}\r\n                </ul>\r\n                <h2>已经完成</h2>\r\n                <ul>\r\n                    {this.renderTodos(true)}\r\n                </ul>\r\n\r\n                {/* 条件渲染 */}\r\n                {/* <button>{2>3?'登录':'注册'}</button> */}\r\n                {/* \r\n                    2>3\r\n                    ?<button>红</button>\r\n                    :<button>绿</button>\r\n                */}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Control; \r\n\r\n","import React from 'react'\r\nimport Context from \"./Context\";\r\n\r\n\r\nconst Demo02 = () => {\r\n    return (\r\n        <div>\r\n            <h2>Demo02</h2>\r\n            <ul>\r\n                <Context.Consumer>        \r\n                    {\r\n                        data=>data.data.map(item=><li key={item}>{item}</li>)\r\n                    }\r\n                </Context.Consumer>\r\n                \r\n                {/* App.js中变成类组件 */}\r\n                <Context.Consumer>\r\n                    {\r\n                        ({changeData})=><button onClick={()=>changeData(123)}>点击</button>\r\n                    }\r\n                </Context.Consumer>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Demo02\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from \"./Context\";\r\nimport Demo02 from './Demo02';\r\n\r\nconst Demo01 = (props) => {\r\n    return (\r\n        <div style={{width:500,height:500,backgroundColor:'pink'}}>\r\n            <h2>Demo01</h2>\r\n            <ul>\r\n                {/*只要数据拿到了，可放在任何位置*/}\r\n                <Context.Consumer>        \r\n                    {\r\n                        data=>         // 如果返回值很简单，可以去掉‘{}’和‘return’\r\n                            data.data.map(item=><li key={item}>{item}</li>)\r\n                    }\r\n\r\n                {/** \r\n                    // {\r\n                    // return <li>\r\n                    //     {data.data}\r\n                    // </li>\r\n                    // }\r\n                */}\r\n                </Context.Consumer>\r\n            </ul>\r\n\r\n            {/* {props.name} */}\r\n            \r\n            <Demo02 />\r\n        </div>\r\n    )\r\n}\r\n\r\nDemo01.propTypes={\r\n    name:PropTypes.string.isRequired      // isRequired表示属性是必须的，必须传参\r\n}\r\n\r\nDemo01.defaultProps = {\r\n    name:'Tom'\r\n}\r\n\r\nexport default Demo01\r\n\r\n\r\n\r\n// 快捷键\r\n// rafc\r\n// rafce\r\n// rcc\r\n\r\n","// higher order component ---HOC\r\n\r\nimport React, { Component } from 'react'\r\n\r\n\r\n// 下面两个组件的重用代码，withFetch是一个高阶组件.返回值是一个类组件\r\nconst withFetch = (Com,url)=>{\r\n    class Topic extends Component{\r\n        constructor(){\r\n            super();\r\n            this.state = {\r\n                data:[]\r\n            }\r\n        }\r\n        componentDidMount(){\r\n            fetch(url)\r\n            .then(res=>res.json())\r\n            .then(res=>this.setState({data:res.data}))\r\n        }\r\n        render(){\r\n            return <Com {...this.props} data={this.state.data}/>    // {...this.props} 将一个对象（如name:Tom,age:10）转换成“属性=属性名”的形式（name=Tom,age=10）\r\n        }\r\n    }\r\n    Topic.disPlayName = `withFetch(${Com.name})`\r\n    return Topic;\r\n}\r\n\r\nconst De=(props)=>{\r\n    return (\r\n        <div>\r\n            <h1>标题{props.name}</h1>\r\n            <div dangerouslySetInnerHTML={{__html:props.data.content}}></div>\r\n        </div>\r\n    )\r\n}\r\nexport const Detail = withFetch(De,'https://cnodejs.org/api/v1/topic/5433d5e4e737cbe96dcef312')\r\n\r\nconst Ho =(props)=> {\r\n    console.log(props)\r\n    console.log(props.data)\r\n    return <ul>\r\n        {\r\n            props.data.map((item)=><li>{item.title}</li>)\r\n        }\r\n    </ul>\r\n\r\n}\r\nexport const HOC = withFetch(Ho,'https://cnodejs.org/api/v1/topics')\r\n\r\n\r\nexport default HOC;\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav>\r\n                {/* <NavLink exact to='/'></NavLink> */}\r\n                <NavLink activeClassName='active' to='/home'>React</NavLink>\r\n                <NavLink activeClassName='active' to='/doc'>文档</NavLink>\r\n                <NavLink activeClassName='active' to='/tuto'>教程</NavLink>\r\n                <NavLink activeClassName='active' to='/blog'>博客</NavLink>\r\n                <NavLink activeClassName='active' to='/comm'>社区</NavLink>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Home = (props)=>{\r\n    return (\r\n        <div style={{textAlign:'center'}}>\r\n            <h2>React</h2>\r\n            <p>用于构建用户界面的JavaScript库</p>\r\n            <div>\r\n                <button onClick={()=>props.history.push('/doc')}>快速开始</button>\r\n                <button onClick={()=>props.history.push('/tuto')}>入门教程</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\r\n\r\nconst Tuto = () => {\r\n    return (\r\n        <div>\r\n            Tuto\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tuto\r\n","import React from 'react'\r\n\r\nconst Comm = (props)=>{\r\n    // console.log(this.props);\r\n    // console.log(props.location.state);\r\n    // console.log(props.location.pathname);\r\n    return <div>Comm</div>\r\n}\r\n\r\nexport default Comm\r\n","import React from 'react'\r\n\r\nimport {BrowserRouter as Router,Route} from 'react-router-dom';\r\nimport { PrivateRoute } from './App';\r\n\r\n\r\n\r\n\r\nconst RouteWithSubRoutes = (route) => {\r\n  console.log(route);\r\n  if (route.pri) {\r\n    return <PrivateRoute {...route} />\r\n  }\r\n  return (\r\n    <Route\r\n      path={route.path}\r\n      render={props => (\r\n        <route.component {...props} routes={route.routes} />\r\n      )}\r\n\r\n    />\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default RouteWithSubRoutes\r\n","import Home from './Home';\r\nimport Tuto from './Tuto';\r\nimport Comm from './Comm';\r\nimport Doc from './Doc';\r\nimport Blog from './Blog';\r\nimport Login from './Login';\r\nimport Core from './Core';\r\nimport Guide from './Guide';\r\nimport Api from './Api';\r\nimport Hooks from './Hooks';\r\n\r\n\r\nconst routes = [\r\n    {\r\n        path:'/home',    \r\n        exact:true,\r\n        component:Home\r\n    },\r\n    {\r\n        path:'/doc',\r\n        component:Doc,\r\n        pri:true,\r\n        routes:[\r\n            {\r\n                path:'/doc/core',\r\n                component:Core,\r\n            },\r\n            {\r\n                path:'/doc/guide',\r\n                component:Guide,\r\n            },\r\n            {\r\n                path:'/doc/api',\r\n                component:Api,\r\n            },\r\n            {\r\n                path:'/doc/hooks',\r\n                component:Hooks,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        path:'/tuto',\r\n        component:Tuto,\r\n        pri:true\r\n    },\r\n    {\r\n        path:'/blog',\r\n        component:Blog\r\n    },\r\n    {\r\n        path:'/comm',\r\n        component:Comm\r\n    },\r\n    {\r\n        path:'/login',\r\n        component:Login\r\n    }\r\n]\r\n\r\nexport default routes;","import React, { useEffect } from 'react'\r\nimport {BrowserRouter as Router,Route,NavLink,Switch,Redirect,withRouter} from 'react-router-dom';\r\nimport './doc.css';\r\n// import routes from './router.config';\r\nimport RouteWithSubRoutes from './RouteWithSubRoutes'\r\n\r\n\r\nconst Doc = ({routes}) => {    \r\n\tconsole.log({routes});\r\n\t// console.log(routes)\r\n    return (\r\n        <div className='doc'>\r\n\t\t\t<div className=\"content\">\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t{routes.map((route, i) => (\r\n\t\t\t\t\t\t<RouteWithSubRoutes key={i} {...route} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</Switch>\r\n\t\t\t\t<Redirect from='/doc' to='/doc/core'/>      {/**重定向 */}\r\n\t\t\t</div>\r\n            <ol>\r\n\t\t\t\t<li><NavLink to='/doc/core'>核心概念</NavLink></li>\r\n                <li><NavLink to='/doc/guide'>高级指引</NavLink></li>\r\n                <li><NavLink to='/doc/api'>API</NavLink></li>\r\n                <li><NavLink to='/doc/hooks'>Hooks</NavLink></li>\r\n            </ol>\r\n\t\t\t\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default withRouter(Doc);   \r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nconst Core = () => {\r\n    return (\r\n        <div>\r\n            <h1>core</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Core\r\n","import React from 'react'\r\n\r\nconst Guide = () => {\r\n    return (\r\n        <div>\r\n            <h1>guide</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Guide\r\n","import React from 'react'\r\n\r\nconst Api = () => {\r\n    return (\r\n        <div>\r\n            <h1>api</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Api\r\n","import React from 'react'\r\n\r\nconst Hooks = () => {\r\n    return (\r\n        <div>\r\n            <h1>hooks</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hooks\r\n","import React from 'react'\r\n\r\nconst Blog = (props)=>{\r\n    return <div>Blog</div>\r\n}\r\n\r\nexport default Blog\r\n","import React from 'react'\r\n\r\nconst Login = (props) => {\r\n    const login = ()=>{\r\n        localStorage.setItem('useinfo','tom')\r\n        // props.history.push('/')    //  可以按<-键后退网页到登录界面\r\n        // props.history.replace('/')       //  可以按<--键,但不能后退网页到登录界面\r\n        props.history.replace(props.location.state)\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={login}>登录</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport Header from './Header';\r\nimport {HashRouter as Router,Route,NavLink,Switch,Redirect} from 'react-router-dom';\r\nimport routes from './router.config';\r\nimport RouteWithSubRoutes from './RouteWithSubRoutes'\r\n\r\n\r\n// // 定义权限路由\r\nfunction PrivateRoute({ component:Com, ...rest }) {\r\n\t// console.log({...rest})   \r\n\treturn (\r\n\t  <Route\r\n\t\t{...rest}\r\n\t\trender={({ location }) =>\r\n\t\t   localStorage.getItem('useinfo')\r\n\t\t   ?<Com {...rest}/> \r\n\t\t   : (\r\n\t\t\t<Redirect\r\n\t\t\t  to={{\r\n\t\t\t\tpathname: \"/login\",\r\n\t\t\t\tstate: location \r\n\t\t\t  }}\r\n\t\t\t/>\r\n\t\t  )\r\n\t\t}\r\n\t  />\r\n\t);\r\n}\r\n\r\n\r\n  \r\nconst App = ()=>{\r\n    return <Router>       {/*Router下可包含多个子元素*/}\r\n        <Header />\r\n        <Switch>\r\n\t\t\t{\r\n\t\t\t\t// routes.map(({pri,...rest})=>{\r\n\t\t\t\t// \tif(pri){\r\n\t\t\t\t// \t\treturn <PrivateRoute {...rest} />\r\n\t\t\t\t// \t}\r\n\t\t\t\t// \treturn <Route {...rest} />        \r\n\t\t\t\t// })\r\n\t\t\t\troutes.map(({...rest})=>(\r\n\t\t\t\t\t<RouteWithSubRoutes {...rest}/>\r\n\t\t\t\t))\r\n\t\t\t\t\r\n\t\t\t}\r\n        </Switch>\r\n    </Router>\r\n}\r\n\r\nexport default App\r\nexport {PrivateRoute};\r\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './pages/TodoList';\nimport Home from './pages/Home';\nimport Control from './components/Control';\nimport Demo01 from './pages/Demo01';\n// import App from './taobao/App';\nimport HOC,{Detail} from './pages/HOC';\nimport Hook from './pages/Hook';\nimport Context from './pages/Context';\nimport 'antd-mobile/dist/antd-mobile.css';  // or 'antd-mobile/dist/antd-mobile.less'\nimport App from './02/App';\n\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n); \n\n// ReactDOM.render(\n//   // <Home0/>,\n//   // <Control />,\n//   // <Demo01 name='13'/>,\n\n//   // <div>\n//   //   <HOC /><Detail name='Tom'/>\n//   // </div>,\n//   // <Context.Provider value='123'>\n//   //   <Hook />\n//   // </Context.Provider>,\n//   document.getElementById('root')\n// ); \n\n// // homework-1-todolist\n// ReactDOM.render(\n//   <TodoList />,\n//   document.getElementById('root')\n// ); \n\n\n\n\n\n\n// // List被引入到普通组件中的List.js中\n// let List = (props)=>{\n//   return <ul>\n//     {\n//       props.data.map((item)=><li key={item.id}>{item.title}</li>)\n//     }\n//   </ul>\n// }\n\n/*\n// Buttons被引入到普通组件中的Buttons.js中\nconst Buttons = ()=>{\n  const btns = [1,2,3,4,5];\n  const handleCLick = (num)=>{\n    // num表示事件对象，事件触发函数的第一个参数\n    console.log(num);\n  }\n  return <div>\n    {\n      btns.map((item)=><button key={item} onClick={()=>handleCLick(item)}>{item}</button>)   //key必须是独一无二的，并且随着浏览器的刷新不会改变\n    }\n  </div>\n}\n*/\n\n\n// // 类Home已引入到pages（大组件）中的Home.js中\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[]\n//     }\n//     // 通过 bind 绑定 this\n//     // this.handleCLick = this.handleCLick.bind(this);\n//     console.log('construct');\n//   }\n//   componentDidMount(){\n//     console.log('didmount');\n//     fetch('https://cnodejs.org/api/v1/topics')\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       console.log(data);\n//       this.setState({data})\n//     })\n//   }\n\n//   // handleCLick(){\n//   //   console.log(this);    // undefined,类的方法默认是不会绑定 this 的\n//   //   // console.log('hello');\n//   // }\n\n\n//   // // 箭头函数绑定this\n//   // handleCLick=()=>{\n//   //   // console.log(this);\n//   // }\n\n//   getData=(page)=>{\n//     fetch('https://cnodejs.org/api/v1/topics?page='+page)\n//     .then(res=>res.json())\n//     .then( ({data}) => {\n//       this.setState({data})\n//     })\n//   }\n\n//   render(){\n//     console.log('render');\n//     const { data } = this.state;\n//     const btns = [1,2,3,4,5];\n//     return <div>\n//       {/* <button onClick={this.handleCLick}>click</button> */}\n//       {/* <Buttons /> */}\n//       {\n//         btns.map((item)=><button key={item} onClick={()=>this.getData(item)}>{item}</button>)   //key必须是独一无二的，并且随着浏览器的刷新不会改变\n//       }\n//       <List data={data}/>\n//     </div>\n//   }\n// }\n\n \n\n\n\n\n\n\n\n\n\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[1,2,3]\n//     }\n//     setTimeout(() => {\n//       this.setState({data:[5,6,7,8,9]})\n//     }, 500);\n//   }\n//   render(){\n//     return <ul>\n//       {\n//         this.state.data.map(\n//           (item)=><li>{item}</li>\n//         )\n//       }\n//     </ul>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Home/>,\n//   document.getElementById('root')\n// );  \n\n\n\n\n\n// let ele = <h1 id=\"title\">hello react</h1>;\n// let ele = React.createElement('h1',{id:'title'},'hello react')\n\n\n// setInterval(()=>{\n//   let ele = <h1 id=\"title\" className=\"tit\">\n//   <div>当前时间</div>\n//   {new Date().toLocaleString()}\n//   </h1>;\n//   ReactDOM.render(\n//     ele,\n//     document.getElementById('root')\n//   );\n// },1000)\n\n\n// 组件声明\n\n// // UI（展示、木偶）组件---函数组件\n// function App(props){\n//   console.log(props);\n//   const{title,id}=props;\n//   return <div>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//     {/* <div>{props.title}</div> */}\n//   </div>\n// }\n// ReactDOM.render(\n//   <App title='可以传任意值' id='app'/>,\n//   document.getElementById('root')\n// );\n\n// // 智能组件---类组件\n/*\n// class Demo extends React.Component{\n//   constructor(){\n//     super();\n//     // 声明状态\n//     this.state={\n//       // name:'xz',\n//       name:new Date().toLocaleString()\n//     }\n//     // setTimeout(()=>{\n//     //   // this.state.name='abc';      //改不了\n//     //   this.setState({name:'abcd'})\n//     // },1000)\n//     setInterval(() => {\n//       this.setState({name:new Date().toLocaleString()})\n//     }, 1000);\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title={this.state.name} id='app'/>\n//     </div>\n//   }\n// }\n\n// ReactDOM.render(\n//   <Demo title='可以传任意值' id='app'/>,\n//   document.getElementById('root')\n// );\n*/\n\n\n//将jsx对象渲染到DOM中\n/*\nlet ReactDOM = {\n  render(eleObj,container){\n    //解构\n    const { type,props } = eleObj;\n    //创建第一层节点\n    let ele = document.createElement(type);\n    // 遍历属性对象，将属性加到第一层节点对象上\n    for (const prop in props) {\n      if(prop == 'children'){\n        if(typeof props.children == 'string'){\n          const textNode = document.createTextNode(props[prop]);\n          ele.appendChild(textNode);\n          break;\n          // continue;\n        }\n        // 将第一层节点对象的子元素添加进去\n        props.children.forEach((child)=>{\n          if(typeof child == 'string'){\n            const textNode = document.createTextNode(child);\n            ele.appendChild(textNode);\n          }else{\n            ReactDOM.render(child,ele);\n          }\n        })\n        \n      }else{\n        ele[prop]=props[prop];\n      }\n    }\n\n    // 将第一层DOM节点加到container中\n    container.appendChild(ele);\n  }\n}\nReactDOM.render(\n  ele,\n  document.getElementById('root')\n);\n*/\n\n\n/*\n\n    1. 原生js，DOM操作（jQ）\n    2. react:开发效率高，性能高\n    3. 环境搭建、创建一个项目、运行\n    4. JSK语法\n*/\n// 按住alt，鼠标点击\n// alt shift + 上下键   复制一行\n// alt + 上下键   移动一行\n// Ctrl + 左右键     一个单词一个单词的移动\n// Ctrl + shift + 左右键，选中整个单词\n// ctrl+shift+L    选中所有匹配的单词"],"sourceRoot":""}